PORT = 2026
MONGO_URI = mongodb+srv://aurinkohealthcare2014:2uEGxYFd5F5CJ9jg@aurinko.mqcudfz.mongodb.net/
JWT_SECRET =AurinkoOne$0852
NODE_ENV=development


Longest Substring Without Repeating Characters

Input: "abcabcbb"

Output: 3 (Substring: "abc")

Anagram Check

Input: "listen", "silent"

Output: true

Count Vowels in a String

Input: "hello"

Output: 2

2. Array Problems
Find the Maximum and Minimum in an Array

Input: [1, 2, 3, 0, 9]

Output: Max: 9, Min: 0

Find the Duplicate Element in an Array

Input: [1, 2, 3, 4, 2]

Output: 2

Move Zeros to the End

Input: [0, 1, 0, 3, 12]

Output: [1, 3, 12, 0, 0]

Find the Missing Number in an Array

Input: [1, 2, 4, 5]

Output: 3

Array Pair Sum (Two Sum)

Input: [2, 7, 11, 15], target = 9

Output: [0, 1]

Product of Array Except Itself

Input: [1, 2, 3, 4]

Output: [24, 12, 8, 6]

3. Linked List Problems
Reverse a Linked List

Input: 1 -> 2 -> 3 -> 4

Output: 4 -> 3 -> 2 -> 1

Detect Cycle in a Linked List

Input: 1 -> 2 -> 3 -> 4 -> 2 (cycle)

Output: true

Find the Middle Element of a Linked List

Input: 1 -> 2 -> 3 -> 4 -> 5

Output: 3

Merge Two Sorted Linked Lists

Input: 1 -> 3 -> 5, 2 -> 4 -> 6

Output: 1 -> 2 -> 3 -> 4 -> 5 -> 6

Remove N-th Node from End of List

Input: 1 -> 2 -> 3 -> 4 -> 5, n = 2

Output: 1 -> 2 -> 3 -> 5

4. Stack Problems
Implement a Stack Using Arrays

Input: push(5), push(10), pop()

Output: pop() = 10

Balanced Parentheses

Input: "()[]{}"

Output: true

Evaluate Postfix Expression

Input: "23*5+"

Output: 11

Reverse a Stack

Input: 1 -> 2 -> 3 -> 4

Output: 4 -> 3 -> 2 -> 1

5. Queue Problems
Implement a Queue Using Two Stacks

Input: enqueue(5), enqueue(10), dequeue()

Output: dequeue() = 5

Circular Queue

Input: enqueue(1), enqueue(2), enqueue(3), dequeue()

Output: dequeue() = 1

6. Sorting Problems
Bubble Sort

Input: [5, 2, 9, 1]

Output: [1, 2, 5, 9]

Selection Sort

Input: [5, 2, 9, 1]

Output: [1, 2, 5, 9]

Insertion Sort

Input: [5, 2, 9, 1]

Output: [1, 2, 5, 9]

Merge Sort

Input: [5, 2, 9, 1]

Output: [1, 2, 5, 9]

Quick Sort

Input: [5, 2, 9, 1]

Output: [1, 2, 5, 9]

7. Searching Problems
Binary Search

Input: [1, 2, 3, 4, 5], target = 3

Output: 2

Linear Search

Input: [1, 2, 3, 4, 5], target = 4

Output: 3

Find Peak Element in an Array

Input: [1, 3, 20, 4, 1]

Output: 20

8. Dynamic Programming Problems
Fibonacci Sequence

Input: n = 5

Output: 5

Knapsack Problem (0/1 Knapsack)

Input: weights = [1, 3, 4, 5], values = [1, 4, 5, 7], capacity = 7

Output: 12

Longest Common Subsequence

Input: "abc", "ab"

Output: 2 ("ab")

Minimum Path Sum in a Grid

Input:

csharp
Copy
Edit
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7 (Path: 1 → 3 → 1 → 1 → 1)

Coin Change Problem

Input: coins = [1, 2, 5], amount = 11

Output: 3 (coins = [5, 5, 1])

9. Graph Problems
Depth-First Search (DFS)

Input: graph = {0: [1, 2], 1: [3], 2: [4], 3: [], 4: []}, start = 0

Output: [0, 1, 3, 2, 4]

Breadth-First Search (BFS)

Input: graph = {0: [1, 2], 1: [3], 2: [4], 3: [], 4: []}, start = 0

Output: [0, 1, 2, 3, 4]

Find Shortest Path in a Graph

Input: graph = {0: [1, 2], 1: [3], 2: [3]}, start = 0, end = 3

Output: 2 (shortest path: 0 → 1 → 3)

Detect Cycle in a Graph

Input: graph = {0: [1], 1: [2], 2: [0]}

Output: true

10. Tree Problems
Binary Tree Inorder Traversal

Input: root = [1, 2, 3]

Output: [2, 1, 3]

Binary Tree Preorder Traversal

Input: root = [1, 2, 3]

Output: [1, 2, 3]

Binary Tree Postorder Traversal

Input: root = [1, 2, 3]

Output: [2, 3, 1]

Height of a Binary Tree

Input: root = [1, 2, 3, null, null, 4, 5]

Output: 3

Check if a Binary Tree is Balanced

Input: root = [1, 2, 2, 3, 3, null, null, 4, 4]

Output: false

